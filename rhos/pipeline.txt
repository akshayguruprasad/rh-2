node('maven-app') {
  // Define Maven Command. Make sure it points to the correct
  // settings for our Nexus installation (use the service to
  // bypass the router). The file nexus_openshift_settings.xml
  // needs to be in the Source Code repository.
  def mvnCmd = "mvn -s ./nexus_openshift_settings.xml"

  // Checkout Source Code
  stage('Checkout Source') {
   
   git credentialsId: '71b087a3-b406-47fa-9028-6d0136508f0e', url: 'http://gogs-akshay-gogs.apps.4df4.openshift.opentlc.com/CICDLabs/openshift-tasks-private.git'

   
  }
  // Set the tag for the development image: version + build number
def devTag  = "1-${BUILD_NUMBER}"
// Set the tag for the production image: version
def prodTag = "1"

// Using Maven build the war file
// Do not run tests in this step
stage('Build war') {
  echo "Building version ${devTag}"
  sh "${mvnCmd} clean package -DskipTests"
}

// Using Maven run the unit tests
/*
stage('Unit Tests') {
  echo "Running Unit Tests"

  sh "${mvnCmd} test"
}
*/

/*
stage('Code Analysis') {
  echo "Running Code Analysis"

  // Replace xyz-sonarqube with the name of your Sonarqube project
  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-akshay-sonarqube.apps.4df4.openshift.opentlc.com/  -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
}
*/

stage('Publish to Nexus') {
  echo "Publish to Nexus"

  // Replace xyz-nexus with the name of your Nexus project
  sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.xyz-nexus-1.svc.cluster.local:8081/repository/releases"
}


stage('Build and Tag OpenShift Image') {
  echo "Building OpenShift container image tasks:${devTag}"

  // Start Binary Build in OpenShift using the file we just published
  // The filename is openshift-tasks.war in the 'target' directory of your current
  // Jenkins workspace
  // Replace aks-dev with the name of your dev project
  sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n aks-dev"

  // OR use the file you just published into Nexus:
  // sh "oc start-build tasks --follow --from-file=http://nexus3.xyz-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war -n aks-dev"

  // Tag the image using the devTag
  openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: 'aks-dev', namespace: 'aks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
}

//----------------------------------------------------------------------------------------------------------------------

stage('Deploy to Dev') {
  echo "Deploying container image to Development Project"

  // Update the Image on the Development Deployment Config
  sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/aks-dev/tasks:${devTag} -n aks-dev"

  // Update the Config Map which contains the users for the Tasks application
  sh "oc delete configmap tasks-config -n aks-dev --ignore-not-found=true"
  sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n aks-dev"

  // Deploy the development application.
  // Replace aks-dev with the name of your production project
  openshiftDeploy depCfg: 'tasks', namespace: 'aks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
  openshiftVerifyDeployment depCfg: 'tasks', namespace: 'aks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
  openshiftVerifyService namespace: 'aks-dev', svcName: 'tasks', verbose: 'false'
}



stage('Integration Tests') {
  echo "Running Integration Tests"
  sleep 15

  // Create a new task called "integration_test_1"
  echo "Creating task"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.aks-dev.svc.cluster.local:8080/ws/tasks/integration_test_1"

  // Retrieve task with id "1"
  echo "Retrieving tasks"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X GET http://tasks.aks-dev.svc.cluster.local:8080/ws/tasks/1"

  // Delete task with id "1"
  echo "Deleting tasks"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X DELETE http://tasks.aks-dev.svc.cluster.local:8080/ws/tasks/1"
}


stage('Copy Image to Nexus Docker Registry') {
  echo "Copy image to Nexus Docker Registry"

  sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/aks-dev/tasks:${devTag} docker://nexus-registry.xyz-nexus.svc.cluster.local:5000/tasks:${devTag}"

  // Tag the built image with the production tag.
  // Replace aks-dev with the name of your dev project
  openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: 'aks-dev', namespace: 'aks-dev', srcStream: 'tasks', srcTag: devTag, verbose: 'false'
}

def destApp   = "tasks-green"
def activeApp = ""

stage('Blue/Green Production Deployment') {
  // Replace xyz-tasks-dev and aks-prod with
  // your project names
  activeApp = sh(returnStdout: true, script: "oc get route tasks -n aks-prod -o jsonpath='{ .spec.to.name }'").trim()
  if (activeApp == "tasks-green") {
    destApp = "tasks-blue"
  }
  echo "Active Application:      " + activeApp
  echo "Destination Application: " + destApp

  // Update the Image on the Production Deployment Config
  sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/xyz-tasks-dev/tasks:${prodTag} -n aks-prod"

  // Update the Config Map which contains the users for the Tasks application
  sh "oc delete configmap ${destApp}-config -n aks-prod --ignore-not-found=true"
  sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n aks-prod"

 openshiftDeploy depCfg: destApp, namespace: 'aks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'




}

stage('Switch over to new Version') {
  input "Switch Production?"

  echo "Switching Production application to ${destApp}."
  // Replace xyz-tasks-prod with the name of your production project
  sh 'oc patch route tasks -n aks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
}
  
  
  
  
  
}